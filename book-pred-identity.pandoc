<style>
table {
  border-collapse: collapse;
  width: 100%;
}

th, td {
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {background-color: #f2f2f2;}
</style>

<br>
<br>

# Identity

We add identity to predicate logic, and look at derivations with identity, the semantics of identity, and translations with identity. Along the way, we introduce and distinguish the indiscernibility of identicals and the identity of indiscernibles.

- [Rules for identity](#rules-for-identity)
- [Translations with identity](#translations-with-identity)
- [Semantics for identity](#semantics-for-identity)
- [Equivalence relations and identity](#equivalence-relations-and-identity)

<br>

<p style="page-break-before: always">

## Rules for identity

<br>

We add identity to our deductive system by formulating introduction and elimination rules.

The introduction rule simply says that one can write $a=a$ on any given line, for any constant $a$, and justify it as `I=`.

The elimination rule says that from $a=b$ and $\phi(a)$, one can infer $\phi(b)$, and justify it as `E=`. In this, $a,b$ are constant symbols, and one obtains $\phi(b)$ from $\phi(a)$ by replacing instances of $a$ by $b$. The elimination rule for identity is sometimes called the *indiscernibility of identicals*, and is expressive of the idea that if two things are identical then they share all the same properties.

<br>

*Example 1*

Here is an example where we use the introduction rule:

```{.ProofChecker .GamutNDPlus submission="none"}
 AxAy(x=y->Rxy) :|-: AxRxx
|AxAy(x=y->Rxy) :assumption
```

<br>

*Example 2*

Note that only some of the instances of the one constant symbol need to be replaced when applying identity elimination:

```{.ProofChecker .GamutNDPlus submission="none"}
 Fa/\Ga, a=b :|-: Fa/\Gb
|Fa/\Ga :assumption
|a=b :assumption
```

<br>

*Example 3*

Here is an example where we work with a negated version of identity. Note that usually we would write a negated identity as e.g. $a\neq b$. However, our proof-checker prefers us to write this as `~a=b`.

```{.ProofChecker .GamutNDPlus submission="none"}
 Fa, ~Fb :|-: ~a=b
|Fa :assumption
|~Fb :assumption
```
<br>



## Translations with identity

<br>

*Example 4*

Often statements of identity are expressed in English just with the "is" of identity. In the antecedent in this statement we have an "is" of identity and in the consequent we have an "is" of predication.

<p style="margin-left: 40px"> $a$ = Allison </p>
<p style="margin-left: 40px"> $b$ = Dr. Baker  </p>
<p style="margin-left: 40px"> $D$ = is a doctor  </p>

~~~{.Translate .FOL system="gamutND" submission="none"}
 a=b->Da : If Allison is Dr. Baker, then Allison is a doctor.
|
~~~

<br>

It is rather undetermined by the English sentence itself whether one should translate "is Dr. Baker" by an identity statement involving `b` rather than by some kind of predicate. If one has identity available, it can be shown that every identity statement `x=b` can be replaced by a predication `Bx`, provided one defines it so that this predicate holds of all and only the x's which are identical to `b`. We illustrate this with the next two examples.


*Example 5*

This example shows how we would translate with a predicate rather than an identity symbol, as indicated by the key:

<p style="margin-left: 40px"> $a$ = Allison </p>
<p style="margin-left: 40px"> $B$ = is Dr. Baker  </p>
<p style="margin-left: 40px"> $D$ = is a doctor  </p>

~~~{.Translate .FOL system="gamutND" submission="none"}
 Ba->Da : If Allison is Dr. Baker, then Allison is a doctor.
|
~~~

<br>

*Example 6*

This proof shows us that if we define a predicate so that it holds only of an individual, we can prove that the two translations given in the two previous examples are equivalent.

```{.ProofChecker .GamutNDPlus submission="none"}
 Ax(x=b->Bx), Ax(Bx->x=b), Ba->Da :|-: a=b->Da
|Ax(x=b->Bx) :assumption
|Ax(Bx->x=b) :assumption
|Ba->Da :assumption
```

```{.ProofChecker .GamutNDPlus submission="none"}
 Ax(x=b->Bx), Ax(Bx->x=b), a=b->Da :|-: Ba->Da
|Ax(x=b->Bx) :assumption
|Ax(Bx->x=b) :assumption
|a=b->Da :assumption
```

<br>


*Example 7*

In this example, we again have the "is" (or "was") of identity:

<p style="margin-left: 40px"> $a$ = Allison </p>
<p style="margin-left: 40px"> $D$ = did it  </p>

~~~{.Translate .FOL system="gamutND" submission="none"}
 Ax(Dx->~x=a) : Whoever did it wasn't Allison.
|
~~~

*Examples 8-9*

These examples show that identity can be used to give truth-conditions for expressions like "except" or "besides" which do not obvious have an identity-like notion written on their surface:

<p style="margin-left: 40px"> $a$ = Allison </p>
<p style="margin-left: 40px"> $H$ = was here  </p>

~~~{.Translate .FOL system="gamutND" submission="none"}
 Ax(~x=a->Hx) : Everyone except Allison was here.
|
~~~

~~~{.Translate .FOL system="gamutND" submission="none"}
 Ex(~x=a/\Hx) : Someone besides Allison was here.
|
~~~

<br>

## Semantics for identity

<br>

[Recall that in Tarski's definition of truth](https://carnap.io/shared/walsh@g.ucla.edu/book-pred-truth.pandoc#tarski-and-his-definition-of-truth-in-a-model), the clause for atomics and conjunctions read as follows:

- *(Unary) Atomics*: If $F$ is a one-place relation symbol, then $\mathcal{M}\models Fa$ if and only if $a^{\mathcal{M}}$ is in $F^{\mathcal{M}}$.

- *Conjunction*: $\mathcal{M}\models \phi\wedge \psi$ if and only if $\mathcal{M}\models \phi$ and $\mathcal{M}\models \psi$.

We simply add a clause to handle identity statements:

- *Identity*: If $a,b$ are constants, then $\mathcal{M}\models a=b$ if and only if $a^{\mathcal{M}}=b^{\mathcal{M}}$

That is, we just interpret identity statements in a model by identity in the metatheory. This is non-trivial since distinct constant symbols can be interpreted by one and the same object in a model.

<br>

*Example 10*

This example illustrates a situation in which two distinct constant symbols must be interpreted as one and the same.

```{.CounterModeler .Simple system="gamutND" submission="none"}
 a=b, Fa, Fb
```

*Example 11*

Here is a distinct situation in which they must be interpreted the same:

```{.CounterModeler .Simple system="gamutND" submission="none"}
 Raa, Rab, AyAz((Ray/\Raz)->y=z)
```



*Example 12*

Using modus tollens on the indiscernibility of identicals, this is a situation in which the two constant symbols have to be interpreted differently:

```{.CounterModeler .Simple system="gamutND" submission="none"}
 Fa, ~Fb
```

*Example 13*

To model the following sentence, one needs more than one object to handle the negated identity `~y=z` under the existential quantifiers.

```{.CounterModeler .Simple system="gamutND" submission="none"}
 EyEz((Ray/\Raz)/\~y=z)
```

<br>

*Example 14*

Here we expand upon the previous example by a distinct another constant which must be interpreted differently, and by making the same existential claim about it.

```{.CounterModeler .Simple system="gamutND" submission="none"}
 ~a=b, EyEz((Ray/\Raz)/\~y=z), EyEz((Rby/\Rbz)/\~y=z)
```

<br>

*Example 15*

Here we make what was common to `a` and `b` in the previous example into a universal claim. The additional axiom `Ax(x=a\/x=b)` will force us to  make the pair `y,z` associated to `a` the same as the pair `y,z` associated to `b.`

```{.CounterModeler .Simple system="gamutND" submission="none"}
 ~a=b, AxEyEz((Rxy/\Rxz)/\~y=z), Ax(x=a\/x=b)
```

<br>

## Equivalence relations and identity

<br>

[Recall that](https://carnap.io/shared/walsh@g.ucla.edu/book-pred-binary-relations.pandoc#special-classes-of-diagrams) a binary relation $R$ is an *equivalence relation* if it satisfies:

- *Reflexivity*: $\forall \;x \; Rxx$

- *Symmetry*: $\forall \; x \; \forall \; y \; (Rxy\rightarrow Ryx)$.

- *Transitivity*: $\forall \; x \; \forall \; y\; \forall \; z \; ((Rxy\wedge Ryz)\rightarrow Rxz)$.

<br>


*Example 16*

In the following three proofs, we prove that identity is an equivalence relation:

<br>

*Reflexivity of identity*:

```{.ProofChecker .GamutNDPlus submission="none"}
  :|-: Ax x=x
```

*Symmetry of identity*:

```{.ProofChecker .GamutNDPlus submission="none"}
  :|-: AxAy(x=y->y=x)
```

*Transitivity of identity*:

```{.ProofChecker .GamutNDPlus submission="none"}
  :|-: AxAyAz((x=y/\y=z)->x=z)
```

<br>

*Example 17*

Often in proofs about identity one ends up replicating these steps. For instance, in the following, we replicate the proof of symmetry twice over:

```{.ProofChecker .GamutNDPlus submission="none"}
 Ax(x=a\/x=b)  :|-: a=c\/b=c
|Ax(x=a\/x=b) :assumption
```

<br>

*Example 18*

Here is a proof that identity is the smallest equivalence relation:

```{.ProofChecker .GamutNDPlus submission="none"}
 AxRxx, AxAy(Rxy->Ryx), AxAyAz((Rxy/\Ryz)->Rxz) :|-: AxAy(x=y->Rxy)
|AxRxx :assumption
|AxAy(Rxy->Ryx) :assumption
|AxAyAz((Rxy/\Ryz)->Rxz) :assumption
```

<br>

*Example 19*

Another natural example of an equivalence relation is indiscernibility with respect to a class of properties. For the sake of simplicity, let us consider just the case of two unary predicates. Consider the binary relation

 $Rxy$ iff $((Fx\rightarrow Fy)\wedge (Fy\rightarrow Fx))\wedge ((Gx\rightarrow Gy)\wedge (Gy\rightarrow Gx))$

We call this *indiscernibility with respect to F,G*, which means that the two objects cannot be distinguished just by recourse to F,G alone.

Let us show that this is an equivalence relation:

*Reflexivity of indiscernibility with respect to F,G*:

```{.ProofChecker .GamutNDPlus submission="none"}
 :|-: Ax(((Fx->Fx)/\(Fx->Fx))/\((Gx->Gx)/\(Gx->Gx)))
```

<br>

*Symmetry of indiscernibility with respect to F,G*:

```{.ProofChecker .GamutNDPlus submission="none"}
 AxAy(((Fx->Fy)/\(Fy->Fx))/\((Gx->Gy)/\(Gy->Gx))) :|-: AxAy(((Fy->Fx)/\(Fx->Fy))/\((Gy->Gx)/\(Gx->Gy)))
```

<br>

*Transitivity of indiscernibility with respect to F,G*:

```{.ProofChecker .GamutNDPlus submission="none"}
 :|-: AxAyAz(((((Fx->Fy)/\(Fy->Fx))/\((Gx->Gy)/\(Gy->Gx)))/\(((Fy->Fz)/\(Fz->Fy))/\((Gy->Gz)/\(Gz->Gy))))->(((Fx->Fz)/\(Fz->Fx))/\((Gx->Gz)/\(Gz->Gx))))
```

<br>

*Example 20*

However, one can show that such indiscernibility does not establish identity:

```{.CounterModeler .Validity system="gamutND" submission="none"}
 (((Fc->Fd)/\(Fd->Fc))/\((Gc->Gd)/\(Gd->Gc))) :|-: c=d
```

A situation in which indiscernibility with respect to some group of properties sufficed for identity is said to be a situation in which the *identity of indiscernibles* holds. Earlier, we saw that for each object $b$, we could define a predicate $Bx$ iff $x=b$. Hence, if there are only finitely many objects $b_1, b_2, \ldots, b_n$, and we add on predicates $B_1, B_2, \ldots, B_n$ in this way, then indiscernibility with respect to these predicates will trivially suffice for identity. However, often we are not in a situation where there are only finitely many objects: imagine, for instance, a situation in which we are trying to describe objects which are as fine-grained as the real numbers. And likewise, often we are not really interested in properties like $Bx$ iff $x=b$, and are rather interested in *qualitative* properties like "blue" or "red" which can be explicated without recourse to identity. The question of whether the identity of indiscernibles holds in this kind of setting is the question of whether any two objects which satisfy all of the same qualitative properties are identical.[^1]

[^1]: See Black's famous example of the two spheres. [Black, Max. 1952. “The Identity of Indiscernibles.” Mind; a Quarterly Review of Psychology and Philosophy 61 (242): 153–64.](https://www.jstor.org/stable/2252291).


<br>

These are lecture notes written by Sean Walsh. They are run on [carnap.io](http://www.carnap.io).[^5]

[^5]: which is
